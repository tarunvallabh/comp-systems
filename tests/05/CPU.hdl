// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Selector for Mux gate for the A register
    Not(in=instruction[15], out=not15);
    
    // Mux to choose between ALU output and instruction for A-register input
    Mux16(a=ALUout, b=instruction, sel=not15, out=m1);

    //A-Register Load
    And(a=instruction[15], b=instruction[5], out=o1);
    Or(a = not15, b = o1, out = loadA);
    
    //A-Register. Must also have addressM
    ARegister(in=m1, load=loadA, out= aReg, out[0..14]=addressM);
    
    //D-Register
    And(a=instruction[4], b= instruction[15], out=dSel);
    DRegister(in=ALUout, load=dSel, out= dReg);
   
    // ALU Input Mux
    Mux16(a=aReg, b=inM, sel=instruction[12], out=m2);

    //ALU - Need two output fields as can't connect a pin declared in the chip's OUT section to a part's input.
    ALU(x=dReg, y=m2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out = ALUout, out=outM, zr=zrout, ng=ngout);
    
    //WriteM
    And(a=instruction[15], b=instruction[3], out=writeM);

    //Program Counter
    //ng*j1
    And(a = ngout, b = instruction[2], out = lt);
    //zr*j2
    And(a = zrout, b = instruction[1], out = eq);
    // (!ng*!zr*j3)
    Not(in = ngout, out = ngNot);
    Not(in = zrout, out = zrNot);
    And(a = ngNot, b = zrNot, out = ngzrNot);
    And(a = ngzrNot, b = instruction[0], out = gt);
    // Selector for PC
    Or(a = lt, b = eq, out = le);
    Or(a = le, b = gt, out = selPC);
    And(a = selPC, b = instruction[15], out = loadPC);
    // inc is always 1
    PC(in = aReg, load = loadPC, inc = true, reset = reset, out[0..14] = pc);
}